# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ialbehavior', [dirname(__file__)])
        except ImportError:
            import _ialbehavior
            return _ialbehavior
        if fp is not None:
            try:
                _mod = imp.load_module('_ialbehavior', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ialbehavior = swig_import_helper()
    del swig_import_helper
else:
    import _ialbehavior
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ialbehavior.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ialbehavior.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ialbehavior.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ialbehavior.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ialbehavior.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ialbehavior.SwigPyIterator_equal(self, *args)
    def copy(self): return _ialbehavior.SwigPyIterator_copy(self)
    def next(self): return _ialbehavior.SwigPyIterator_next(self)
    def __next__(self): return _ialbehavior.SwigPyIterator___next__(self)
    def previous(self): return _ialbehavior.SwigPyIterator_previous(self)
    def advance(self, *args): return _ialbehavior.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ialbehavior.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ialbehavior.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ialbehavior.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ialbehavior.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ialbehavior.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ialbehavior.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ialbehavior.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import inaoqi
class behavior(inaoqi.baseModule):
    __swig_setmethods__ = {}
    for _s in [inaoqi.baseModule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, behavior, name, value)
    __swig_getmethods__ = {}
    for _s in [inaoqi.baseModule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, behavior, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ialbehavior.new_behavior(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ialbehavior.delete_behavior
    __del__ = lambda self : None;
    def autoBind(self, *args): return _ialbehavior.behavior_autoBind(self, *args)
    def setEnabled(self, *args): return _ialbehavior.behavior_setEnabled(self, *args)
    def isEnabled(self): return _ialbehavior.behavior_isEnabled(self)
    def setResources(self, *args): return _ialbehavior.behavior_setResources(self, *args)
    def waitFor(self, *args): return _ialbehavior.behavior_waitFor(self, *args)
    def session(self): return _ialbehavior.behavior_session(self)
    def acquireResources(self): return _ialbehavior.behavior_acquireResources(self)
    def waitResourcesCallback(self, *args): return _ialbehavior.behavior_waitResourcesCallback(self, *args)
    def isResourceFree(self, *args): return _ialbehavior.behavior_isResourceFree(self, *args)
    def waitResourceFree(self): return _ialbehavior.behavior_waitResourceFree(self)
    def waitResources(self): return _ialbehavior.behavior_waitResources(self)
    def releaseResource(self): return _ialbehavior.behavior_releaseResource(self)
    def addInput(self, *args): return _ialbehavior.behavior_addInput(self, *args)
    def addOutput(self, *args): return _ialbehavior.behavior_addOutput(self, *args)
    def addParameter(self, *args): return _ialbehavior.behavior_addParameter(self, *args)
    def getParameter(self, *args): return _ialbehavior.behavior_getParameter(self, *args)
    def getParametersList(self): return _ialbehavior.behavior_getParametersList(self)
    def setParameter(self, *args): return _ialbehavior.behavior_setParameter(self, *args)
    def setParentFromName(self, *args): return _ialbehavior.behavior_setParentFromName(self, *args)
    def stimulateIO(self, *args): return _ialbehavior.behavior_stimulateIO(self, *args)
    def exit(self): return _ialbehavior.behavior_exit(self)
    def getBrokerName(self): return _ialbehavior.behavior_getBrokerName(self)
    def version(self): return _ialbehavior.behavior_version(self)
    def hasTimeline(self): return _ialbehavior.behavior_hasTimeline(self)
    def getTimeline(self): return _ialbehavior.behavior_getTimeline(self)
    def hasParentTimeline(self): return _ialbehavior.behavior_hasParentTimeline(self)
    def getParentTimeline(self): return _ialbehavior.behavior_getParentTimeline(self)
    def connectInput(self, *args): return _ialbehavior.behavior_connectInput(self, *args)
    def connectParameter(self, *args): return _ialbehavior.behavior_connectParameter(self, *args)
    def connectOutput(self, *args): return _ialbehavior.behavior_connectOutput(self, *args)
    def _reportError(self, *args): return _ialbehavior.behavior__reportError(self, *args)
behavior_swigregister = _ialbehavior.behavior_swigregister
behavior_swigregister(behavior)

class timeline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeline, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ialbehavior.new_timeline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ialbehavior.delete_timeline
    __del__ = lambda self : None;
    def play(self): return _ialbehavior.timeline_play(self)
    def pause(self): return _ialbehavior.timeline_pause(self)
    def stop(self): return _ialbehavior.timeline_stop(self)
    def goTo(self, *args): return _ialbehavior.timeline_goTo(self, *args)
    def getSize(self): return _ialbehavior.timeline_getSize(self)
    def getFPS(self): return _ialbehavior.timeline_getFPS(self)
    def setFPS(self, *args): return _ialbehavior.timeline_setFPS(self, *args)
timeline_swigregister = _ialbehavior.timeline_swigregister
timeline_swigregister(timeline)



