########################## What am I looking at?    ##########################

# This file determines the behavior of autonomous life.
# We search for the file in the following locations (in order of priority)
# 1. ~/.config/naoqi/autonomy.cfg
# 2. YOUR_DEPLOY/etc/naoqi/autonomy.cfg
# 3. /etc/naoqi/autonomy.cfg

########################## Header                   ##########################

CompatibleRobots: [nao, juliette]

# These two only exist for logging and are not required.
# A string to help identify this particular configuration file
ConfigurationDescription: virtual NAO & Juliette 2.0.x Compatible.  Limited continuous Dialog.

# This is the version of the configuration file format, should be an int.  Required.
# We don't allow new configs to be used on old systems, but we allow old configs
# on new systems. Old configs on new robots is generally safe because if we
# deprecate a  keyword, we'll simply ignore it.  If eventually functionality
# changes that make old configs not work correct on new systems, you will see
# an error when the file is attempted to be loaded.  If functionality changes
# but there is backward compatibility that will be removed, a warning will be
# given when the file loads.  The config file located in /etc on a system image
# is always gauranteed to be compatible with that system image.
FormatCompatibility: 2

########################## Specific Global Configuration    ###################

# run_dialog* is still used to manage dialog focus.
# other possible parameters here will be revealed at a later date, and
# allow dialog topics to have life focus without the run_dialog wrapper activity
# other possible values are: "no_focus" or "focus_topics" (unsupported)
DialogFocusPolicy: run_dialog

# For backward compatibility, set nature of "" activity
# Using the value "dynamic" will make the "" activity take the nature of the
# current state it was encountered in (if we want "" to either enter interactive
# state with no activity, or to stay inside interactive state with no activity)
# Using "interactive" here is nonsense and causes undefined behavior!
NatureOfNoActivity: solitary

########################## Autonomy                  ##########################

AutonomousActions:

# ----------------------------------------------------------------------------
#
# The following actions happen anytime their condition is edge true
# (ExecuteAnyTimeConditionEdgeTrue)
#
# ----------------------------------------------------------------------------

 - Description:       Load aldebaran sound set
   Action:            ApiCall
   ActionParameters:
    Module:          ALAudioPlayer
    Method:          loadSoundSet
    Parameters:      Aldebaran
    Async:           yes
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    'Launchpad/PreviousState' == "disabled"

 - Description:       Init leds groups
   Actions:
    - Action:            ApiCall
      ActionParameters:
       Module:           ALLeds
       Method:           createGroup
       Parameters:       [sleep-faceLeds, [FaceLeds, ChestLeds] ]
       Async:            yes
    - Action:            ApiCall
      ActionParameters:
       Module:           ALLeds
       Method:           createGroup
       Parameters:       [sleep-semiFaceLeds, [FaceLed0, FaceLed1, FaceLed7, FaceLed3, FaceLed4, FaceLed5, ChestLeds] ]
       Async:            yes
    - Action:            ApiCall
      ActionParameters:
       Module:           ALLeds
       Method:           createGroup
       Parameters:       [duringsleep-faceleds, [RightFaceLed3, RightFaceLed4, LeftFaceLed5, LeftFaceLed6, ChestLeds] ]
       Async:            yes
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    'Launchpad/PreviousState' == "disabled"

 # play sound if we hold camera and sensor for one second
 - Description:       Head touch validation 1
   Action:            ApiCall
   ActionParameters:
    Module:          ALAudioPlayer
    Method:          playSoundSetFile
    Parameters:      sfx_validation_1
    Async:           yes
   ExecuteAnyTimeConditionEdgeTrue: yes
   # the value for _ALBrightnessStatistics/Avg could differ depending on robot.
   # a value below 16 has never been seen.  20 seems too strict.  30 minimum probably.
   # _ALBrightnessStatistics/Std can reliably go to zero if the user is not moving
   # their hand and is sercure with the hand.  But if the user moves a little we can see
   # between 4 and 5.
   Condition: >
    ('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0) ~ 1
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'AutonomousLife/Asleep'
    && !'_AutonomousLife/_ForbidStopCommands'
    && 'AutonomousLife/FocusedActivity' != "store-access/interactive"

 # play sound if we hold camera and sensor for two seconds
 - Description:       Head touch validation 2
   Action:            ApiCall
   ActionParameters:
    Module:          ALAudioPlayer
    Method:          playSoundSetFile
    Parameters:      sfx_validation_1
    Async:           yes
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    ('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0) ~ 2
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'AutonomousLife/Asleep'
    && !'_AutonomousLife/_ForbidStopCommands'
    && 'AutonomousLife/FocusedActivity' != "store-access/interactive"

 # clear activity stack if we hold camera and sensor for at least one second
 # but less than 3 seconds and let go.  also play sound and leds
 - Description:       Stop running activities from head touch
   Actions:
    - Action:           BlockAutonomousFocus
    - Action:           ApiCall
      ActionParameters:
       Module:          ALSpeechRecognition
       Method:          setAudioExpression
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          ALSpeechRecognition
       Method:          setVisualExpression
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAutonomousBlinking
       Method:          setEnabled
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          _ALExpressiveness
       Method:          _setNotificationEnabled
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          ALLeds
       Method:          fadeRGB
       Parameters:      [AllLeds, 0.0, 1.0, 0.0, 0.0]
    - Action:            ApiCall
      ActionParameters:
       Module:          ALAudioPlayer
       Method:          playSoundSetFile
       Parameters:      sfx_confirmation_1
    - Action:           StopAll             # Here is where we stop the app(s)
      ActionParameters:
       Reason:          user-stop
    - Action:           ApiCall
      ActionParameters:
       Module:          _ALExpressiveness
       Method:          _setNotificationEnabled
       Parameters:      1
    # we need to reset the leds, normally that will happen as a result of the
    # state change, but if no activity was focused there will be no state change.
    # alternatively, we could reinforce the solitary state here, but that could
    # be seen as overly redundant (but possibly nice house cleaning?)
    - Action:            ApiCall
      ActionParameters:
       Module:           ALSignsAndFeedback
       Method:           triggerBit
       Parameters:       AllLedsReset
    - Action:           UnblockAutonomousFocus
    # we don't reenable autonomous blinking as that is done elsewhere
    # we don't need to restore the visual expression here because we will implicitly
    # be in solitary state which uses no expression for dialog by default
    # TODO: we need to remove the expression settings from dialog
    #       and do it all in this config file.
   ExecuteAnyTimeConditionEdgeTrue: yes
   # this condition ensures that the head was held for longer than one second
   # just before, but held less than 3 seconds, and is currently releaseed.
   # (we actually say 2.9, to make sure that there is zero chance that
   #  this rule gets triggered at the "exact" same time as the go to sleep rule)
   Condition: >
    ('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0) ~ 1 @ 0.1
    && !(('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0) ~ 2.9) @ 0.1
    && (!'FrontTactilTouched' || !('_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0))
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'AutonomousLife/Asleep'
    && !'_AutonomousLife/_ForbidStopCommands'
    && 'AutonomousLife/FocusedActivity' != "store-access/interactive"

 # enter sleep if we hold camera and sensor for at least 3 seconds
 # also play sound and leds
 - Description:         Sleep
   Actions:
    - Action:           BlockAutonomousFocus
    - Action:           ApiCall
      ActionParameters:
       Module:          ALBasicAwareness
       Method:          setEnabled
       Parameters:      0
       Async:           yes
    - Action:           ApiCall
      ActionParameters:
       Module:          ALSpeechRecognition
       Method:          setAudioExpression
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          ALSpeechRecognition
       Method:          setVisualExpression
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAutonomousBlinking
       Method:          setEnabled
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          _ALExpressiveness
       Method:          _setNotificationEnabled
       Parameters:      0
    - Action:           ApiCall
      ActionParameters:
       Module:          ALLeds
       Method:          off
       Parameters:      EarLeds
    - Action:           ApiCall
      ActionParameters:
       Module:          ALLeds
       Method:          fadeRGB
       Parameters:      [sleep-faceLeds, 0.7, 0.0, 1.0, 0.0]
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAudioPlayer
       Method:          playSoundSetFile
       Parameters:      sfx_confirmation_1
       Async:           yes
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAnimationPlayer
       Method:          run
       Parameters:      sleep-reactions/Animations/Start_ShakeHead
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAudioPlayer
       Method:          playSoundSetFile
       Parameters:      bidi_sleep_1
       Async:           yes
    - Action:           ApiCall
      ActionParameters:
       Module:          ALMemory
       Method:          raiseEvent
       Parameters:      [AutonomousLife/Asleep, 1]
    # if the app is not compatible with the sleep context, it will automatically be
    # stopped by ALife engine after this event is raised.
    # set state will set stuff like basic awareness and dialog and more.
    # there is a chance this already redundantly happened if an activity was stopped.
    - Action:           SetState
      ActionParameters:
       State:           solitary
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAudioPlayer
       Method:          playSoundSetFile
       Parameters:      bidi_sleep_2
    - Action:           UnblockAutonomousFocus
   SkipIfRulesActive:               [Sleep]
   ExcuteAfterActiveRules:          [Freeze Head, Wake up]
    # we don't reenable autonomous blinking as that is done elsewhere
    # we don't need to restore the visual expression here because we will
    # be in solitary state which uses no expression for dialog by default
    # TODO: we need to remove the expression settings from dialog
    #       and do it all in this config file.  But it's more complex than
    #       first thought because of the hacks there to prevent a double bip-bip
    #       on dialog startup
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    ('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0) ~ 3
    && !'AutonomousLife/Asleep'
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'_AutonomousLife/_ForbidStopCommands'
    && 'AutonomousLife/FocusedActivity' != "store-access/interactive"

 # exit sleep if touch the head sensors at all.  also leds and sound feedback
 - Description:         Wake up
   Actions:
    - Action:           BlockAutonomousFocus
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAudioPlayer
       Method:          playSoundSetFile
       Parameters:      bidi_wakeUp_1
       Async:           yes
    - Action:           ApiCall
      ActionParameters:
       Module:          ALMemory
       Method:          raiseEvent
       Parameters:      [AutonomousLife/Asleep, 0]
    # enforceing solitary state will get us the right leds, stiffness, etc configuration
    - Action:           SetState
      ActionParameters:
       State:           solitary
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAnimationPlayer
       Method:          run
       Parameters:      sleep-reactions/Animations/End_ShakeHead
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAudioPlayer
       Method:          playSoundSetFile
       Parameters:      bidi_wakeUp_2
       Async:           yes
    - Action:           ApiCall
      ActionParameters:
       Module:          _ALExpressiveness
       Method:          _setNotificationEnabled
       Parameters:      1
    - Action:           UnblockAutonomousFocus
   SkipIfRulesActive:               [Sleep, Wake up]
   ExecuteAnyTimeConditionEdgeTrue: yes
   # the second part of this condition makes sure that the user took their
   # hand off of the head at least once since entering sleep
   Condition: >
    'AutonomousLife/Asleep' &&
    ('FrontTactilTouched' || 'MiddleTactilTouched' || 'RearTactilTouched') &&
    !(('FrontTactilTouched' || 'MiddleTactilTouched' || 'RearTactilTouched') @ 0.1)
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'_AutonomousLife/_ForbidStopCommands'
    && 'AutonomousLife/FocusedActivity' != "asleep-update/interactive"

 # freeze head if we hold camera and sensor
 - Description:      Freeze Head
   Action:           FreezeChain
   ActionParameters:
    Chain:           Head
   SkipIfRulesActive:               [Sleep]
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    'FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]

 # unfreeze head if we held camera and sensor and then released hand
 - Description:      Unfreeze Head
   Action:           UnfreezeChain
   ActionParameters:
    Chain:           Head
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    ('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0) @ 0.1
    && !('FrontTactilTouched' && '_ALBrightnessStatistics/Avg' < 30.0 && '_ALBrightnessStatistics/Std' < 5.0)

 # This would normally be in the ExecuteBeforeActivityIfConditionTrue section,
 # however, we are 100% sure that the developer will never turn this service
 # off, so we don't need to reinforce it between states.
 - Description:       Start BrighnessStatistics Service
   Action:            ApiCall
   ActionParameters:
    Module:           _ALBrightnessStatistics
    Method:           _start
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    'AutonomousLife/State' subsets ["solitary", "interactive"]

 - Description:       Stop BrighnessStatistics Service
   Action:            ApiCall
   ActionParameters:
    Module:           _ALBrightnessStatistics
    Method:           _stop
   ExecuteAnyTimeConditionEdgeTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled"

# for the next two types of examples to be cool,
# set NatureOfNoActivity: dynamic
# and DialogFocusPolicy: no_focus or focus_topics

# - Description:       Example go interactive
#   Action:            SetState
#   ActionParameters:
#    State: interactive
#   ExecuteAnyTimeConditionEdgeTrue: yes
#   Condition: >
#    someone is in zone 1

# - Description:       Example go solitary
#   Action:            SetState
#   ActionParameters:
#    State: solitary
#   ExecuteAnyTimeConditionEdgeTrue: yes
#   Condition: >
#    no one has talked to robot, no one is around robot,
#    and no activity focused for awhile

# ----------------------------------------------------------------------------
#
# The following actions happen before an activity is focused if their
# condition is true (in state change, including "" activity)
# (ExecuteBeforeActivityIfConditionTrue)
#
# ----------------------------------------------------------------------------


# Life start configurations

 - Description:       Start monitoring users with UserSessionManager
   Action:            ApiCall
   ActionParameters:
    Module:          _UserSessionManager
    Method:          startMonitoringUsers
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'Launchpad/PreviousState' subsets ["safeguard", "disabled"] &&
    'AutonomousLife/State' subsets ["solitary", "interactive"]

# Solitary and Interactive configurations

 - Description:       Clean leds after apps
   Action:            ApiCall
   ActionParameters:
    Module:           ALSignsAndFeedback
    Method:           triggerBit
    Parameters:       AllLedsReset
   ExecuteBeforeActivityIfConditionTrue: yes
   ExecuteAfterIfSimultaniouslyTrue:
    - Set continuous dialog unengaged for solitary with no focused activity
    - Stop continuous dialog during activity, disabled, safeguard, sleep
   # we also reset leds when going to disabled from sleep, so there is no
   # confusion that the robot is not currently asleep.
   # usually we prefer to alter as little as possible when going to disabled.
   Condition: >
    (('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled"] || '_AutonomousLife/ForceState')
     && 'AutonomousLife/State' subsets ["solitary", "interactive"]
     && !'AutonomousLife/Asleep')
    || 'AutonomousLife/State' == "disabled"

 - Description:       Allow stop command
   Action:            ApiCall
   ActionParameters:
    Module:           ALAutonomousLife
    Method:           _forbidStopCommands
    Parameters:       0
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled"] || '_AutonomousLife/ForceState')
     && 'AutonomousLife/State' subsets ["solitary", "interactive"]

 - Description:       Wake up robot for solitary or interactive
   Action:            ApiCall
   ActionParameters:
    Module:           ALMotion
    Method:           wakeUp
   ExecuteAfterIfSimultaniouslyTrue: Clean leds after apps
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'AutonomousLife/Asleep'

 - Description:       Start background movement for solitary or interactive
   Actions:
    - Action:            ApiCall
      ActionParameters:
       Module:           ALBackgroundMovement
       Method:           _setMode
       Parameters:       backToNeutral
    - Action:            ApiCall
      ActionParameters:
       Module:           ALBackgroundMovement
       Method:           setEnabled
       Parameters:       1
   ExecuteBeforeActivityIfConditionTrue: yes
   ExecuteAfterIfSimultaniouslyTrue: Wake up robot for solitary or interactive
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'AutonomousLife/Asleep'

 - Description:       Start AutonomousBlinking for solitary or interactive
   Actions:
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAutonomousBlinking
       Method:          setEnabled
       Parameters:      1
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && !'AutonomousLife/Asleep'

# Solitary configurations

 - Description:       Set basic awareness solitary
   Action:            SetConfiguration
   ActionParameters:
    Module:            ALBasicAwareness
    ConfigurationSet:  solitary
   ExecuteBeforeActivityIfConditionTrue: yes
   ExecuteAfterIfSimultaniouslyTrue: Wake up robot for solitary or interactive
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled", "interactive"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' == "solitary"
    && !'AutonomousLife/Asleep'

 - Description:       Set continuous dialog unengaged for solitary with no focused activity
   Action:            SetConfiguration
   ActionParameters:
    Module:            ALDialog
    ConfigurationSet:  unengaged
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled", "interactive"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' == "solitary"
    && 'AutonomousLife/NextActivity' == ""
    && !'AutonomousLife/Asleep'

# Interactive configurations

 - Description:       Set basic awareness interactive
   Action:            SetConfiguration
   ActionParameters:
    Module:            ALBasicAwareness
    ConfigurationSet:  interactive
   ExecuteBeforeActivityIfConditionTrue: yes
   ExecuteAfterIfSimultaniouslyTrue: Wake up robot for solitary or interactive
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled",  "solitary"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' == "interactive"
    && !'AutonomousLife/Asleep'

 - Description:       Start listening movement for interactive
   Actions:
    - Action:            ApiCall
      ActionParameters:
       Module:           ALListeningMovement
       Method:           setEnabled
       Parameters:       1
   ExecuteBeforeActivityIfConditionTrue: yes
   ExecuteAfterIfSimultaniouslyTrue: Wake up robot for solitary or interactive
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled",  "solitary"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' == "interactive"
    && !'AutonomousLife/Asleep'

# Disabled/safeguard or otherwise off configurations

 - Description:       Disable notifications in sleep
   Action:            ApiCall
   ActionParameters:
    Module:           _ALExpressiveness
    Method:           _setNotificationEnabled
    Parameters:       0
   ExecuteBeforeActivityIfConditionTrue: yes
   # For initial transition into sleep, we also disabled the notifications.
   # that must happen so that we have no led animation interference.
   # this rule is also necessary in case we transition in and out of safeguard
   # during sleep, or if an asleep activity reenabled notifs.
   Condition: >
    ('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["safeguard", "disabled"] || '_AutonomousLife/ForceState')
    && 'AutonomousLife/State' subsets ["solitary", "interactive"]
    && 'AutonomousLife/Asleep'

 - Description:       Enable notifications for disabled, safeguard
   Action:            ApiCall
   ActionParameters:
    Module:           _ALExpressiveness
    Method:           _setNotificationEnabled
    Parameters:       1
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' subsets ["safeguard", "disabled"]

 - Description:       Stop basic awareness in disabled, safeguard, sleep
   Action:            SetConfiguration
   ActionParameters:
    Module:            ALBasicAwareness
    ConfigurationSet:  disabled
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled" ||
    'AutonomousLife/State' == "safeguard" ||
    'AutonomousLife/Asleep'

 - Description:       Stop background movement in disabled, safeguard, sleep
   Actions:
    - Action:            ApiCall
      ActionParameters:
       Module:           ALBackgroundMovement
       Method:           setEnabled
       Parameters:       0
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled" ||
    'AutonomousLife/State' == "safeguard" ||
    'AutonomousLife/Asleep'

 - Description:       Stop listening movement in disabled, solitary, safeguard, sleep
   Actions:
    - Action:            ApiCall
      ActionParameters:
       Module:           ALListeningMovement
       Method:           setEnabled
       Parameters:       0
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    (('AutonomousLife/FocusedActivity' != "" || 'Launchpad/PreviousState' subsets ["interactive"] || '_AutonomousLife/ForceState')
     && 'AutonomousLife/State' subsets ["disabled", "safeguard", "solitary"])
    || 'AutonomousLife/Asleep'

 - Description:       Stop continuous dialog during activity, disabled, safeguard, sleep
   Action:            SetConfiguration
   ActionParameters:
    Module:            ALDialog
    ConfigurationSet:  disabled
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled" ||
    'AutonomousLife/State' == "safeguard" ||
    'AutonomousLife/NextActivity' != "" ||
    'AutonomousLife/Asleep'

 - Description:       Stop monitoring users with UserSessionManager
   Action:            ApiCall
   ActionParameters:
    Module:          _UserSessionManager
    Method:          stopMonitoringUsers
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' subsets ["safeguard", "disabled"]

 - Description:       Stop AutonomousBlinking for disabled or sleep
   Actions:
    - Action:           ApiCall
      ActionParameters:
       Module:          ALAutonomousBlinking
       Method:          setEnabled
       Parameters:      0
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled" ||
    'AutonomousLife/Asleep'

 - Description:       Rest robot in disabled, sleep
   Action:            ApiCall
   ActionParameters:
    Module:           ALMotion
    Method:           rest
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled" ||
    'AutonomousLife/Asleep'

 - Description:       Set leds for sleep
   Actions:
   - Action:            ApiCall
     ActionParameters:
      Module:           ALLeds
      Method:           off
      Parameters:       FaceLeds
   - Action:            ApiCall
     ActionParameters:
      Module:           ALLeds
      Method:           off
      Parameters:       EarLeds
   - Action:            ApiCall
     ActionParameters:
      Module:           ALLeds
      Method:           off
      Parameters:       FeetLeds
   - Action:           ApiCall
     ActionParameters:
      Module:          ALLeds
      Method:          fadeRGB
      Parameters:      [duringsleep-faceleds, 0.3, 0.0, 0.404, 0.0]
   ExecuteBeforeActivityIfConditionTrue: yes
   ExecuteAfterIfSimultaniouslyTrue: Rest robot in disabled, sleep
   ExecuteAfterIfSimultaniouslyTrue: Disable notifications in sleep
   Condition: >
    ('AutonomousLife/State' == "solitary" ||
     'AutonomousLife/State' == "interactive")
    && 'AutonomousLife/Asleep'

 - Description:       Unset sleep when going to disabled
   Action:            ApiCall
   ActionParameters:
    Module:           ALMemory
    Method:           raiseEvent
    Parameters:       [AutonomousLife/Asleep, 0]
   ExecuteBeforeActivityIfConditionTrue: yes
   Condition: >
    'AutonomousLife/State' == "disabled" &&
    'AutonomousLife/Asleep'

########################## Configuration Sets       ##########################

ConfigurationSets:

 ALBasicAwareness:
    # For special items where we can override prefs:
    #  If OverridePreference is set to "No":
    #   If the preference exists: operations will use the value from prefs
    #   If the preference does not exist: operations will use value from config file
    #  If OverridePreference is set to "Yes":
    #   Ignore preference, use values from config file
    #  If we do not mention one of these items in the config:
    #   Nothing for that item will be set in BA.

  - Name:          solitary
    OverridePreference: No # No is the default value, we do not need to put it here.
    Methods:
     - Method:     resetAllParameters
     - Method:     setEngagementMode
       Parameters: Unengaged
     - Method:     setParameter
       Parameters: [MaxHumanSearchTime, 5.0]
     - Method:     setParameter
       Parameters: [MaxDistanceNotFullyEngaged, 3.0]
     # Special method for backward compat with preferences
     # com.aldebaran.autonomouslife DefaultBasicAwarenessTrackingMode
     - Method:     SetTrackingMode
       Parameters: Head
     - Method:     setEnabled
       Parameters: 1
     - Method:     resumeAwareness

  - Name:          interactive
    OverridePreference: No
    Methods:
     - Method:     resetAllParameters
     - Method:     setEngagementMode
       Parameters: FullyEngaged
     - Method:     setParameter
       Parameters: [MaxHumanSearchTime, 3.0]
     # Special method for backward compat with preferences
     # com.aldebaran.autonomouslife DefaultBasicAwarenessTrackingMode
     - Method:     SetTrackingMode
       Parameters: Head
     # Special method for backward compat with preferences
     # com.aldebaran.autonomouslife.movecontextually ConversationDistance
     - Method:     ConversationDistance
       Parameters: 0.65
     # Special method for backward compat with preferences
     # com.aldebaran.autonomouslife.movecontextually MaxDeltaOneMove
     - Method:     MaxDeltaOneMove
       Parameters: 0.1
     # Special method for backward compat with preferences
     # com.aldebaran.autonomouslife.movecontextually HumanFollowableRadius_RelativeZone1
     - Method:     HumanFollowableRadius_RelativeZone1
       Parameters: 0.0
     - Method:     setEnabled
       Parameters: 1
     - Method:     resumeAwareness

  - Name:          disabled
    Method:        setEnabled
    Parameters:    0

 # We don't need a configuration set for these as it's just one item,
 # may as well do api call directly in action
 ALDialog:

  - Name:          unengaged
    Method:        _startDialog
    Parameters:    Unengaged

  - Name:          fullyengaged
    Method:        _startDialog
    Parameters:    FullyEngaged

  - Name:          disabled
    Method:        stopDialog
