filter FindPersonHead
{
Identity idModeIs3D;
Identity idDistance;
Identity idPreviousPos;
Identity idHeightOffset;

Dispatch disp;
SelectCameraPositions selectCamPos;
FindPersonHead2D fph2d;
FindPersonHead3D fph3d;
Multiplex multi;

idModeIs3D:in <= modeIs3D;
idDistance:in <= distance;
idPreviousPos:in <= previousPosition;

disp:in[1] <= dummyIn;
idModeIs3D:out->disp:state;

disp:ontrue->fph3d:state;
disp:onfalse->fph2d:state;
fph3d:personHeadObject->multi:master;
fph2d:personHeadObject->multi:slave;

multi:out => personHeadObject;

selectCamPos:cameraTopPositionTorso <= cameraTopPositionTorso;
selectCamPos:cameraTopPositionRobot <= cameraTopPositionRobot;
selectCamPos:cameraTopPositionWorld <= cameraTopPositionWorld;
selectCamPos:cameraDepthPositionTorso <= cameraDepthPositionTorso;
selectCamPos:cameraDepthPositionRobot <= cameraDepthPositionRobot;
selectCamPos:cameraDepthPositionWorld <= cameraDepthPositionWorld;
idModeIs3D:out->selectCamPos:is3d;

idHeightOffset:in <= heightOffset;


# Parameters for 2D
fph2d:rgbInputImage <= rgbInputImage;

selectCamPos:cameraPositionTorso->fph2d:cameraPositionTorso;
selectCamPos:cameraPositionRobot->fph2d:cameraPositionRobot;
selectCamPos:cameraPositionWorld->fph2d:cameraPositionWorld;

idHeightOffset:out->fph2d:heightOffset;

idDistance:out->fph2d:distance;
idPreviousPos:out->fph2d:previousPosition;


# Parameters for 3D
fph3d:depthInputImage <= depthInputImage;
fph3d:irInputImage <= irInputImage;

# Parameters for Segmentation
fph3d:lab_kernel <= lab_kernel;
fph3d:lab_toleranceH <= lab_toleranceH;
fph3d:lab_toleranceV <= lab_toleranceV;
fph3d:lab_min <= lab_min;
fph3d:lab_max <= lab_max;


selectCamPos:cameraPositionTorso->fph3d:cameraPositionTorso;
selectCamPos:cameraPositionRobot->fph3d:cameraPositionRobot;
selectCamPos:cameraPositionWorld->fph3d:cameraPositionWorld;

idHeightOffset:out->fph3d:heightOffset;

idDistance:out->fph3d:distance;
idPreviousPos:out->fph3d:previousPosition;
}
