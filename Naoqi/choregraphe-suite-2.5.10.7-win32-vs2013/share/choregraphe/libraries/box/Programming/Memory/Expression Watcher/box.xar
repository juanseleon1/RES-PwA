<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheBox xar_version="3">
    <Box name="root" id="1" localization="8" tooltip="This box is an interface to the module ALExpressionWatcher.&#x0A;&#x0A;The output onExpressionTriggered() will be triggered each time your designed expression condition is valid.&#x0A;&#x0A;V1.0.0" x="91" y="51">
        <bitmap>media/images/box/condition-checker.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.expressionWatcher = self.session().service("ALExpressionWatcher")
        self.isRunning = False
        self.expressionObject = None
        self.condition = self.getParameter("Condition")
        self.report_mode = self.getParameter("Report mode")

    def onUnload(self):
        with self.lock:
            self.expressionObject = None
            self.isRunning = False

    def onInput_onStart(self):
        with self.lock:
            self.isRunning = True
            self.addExpression(self.condition, self.report_mode)
        self.onStopped()

    def addExpression(self, condition, report_mode):
        """ add expression to ALExpressionWatcher """
        if not self.expressionObject:
            self.expressionObject = self.expressionWatcher.add(self.condition, self.reportOptionStrToInteger(self.report_mode))
            self.expressionObject.signal.connect(self.onConditionTriggeredCallback)

    def onConditionTriggeredCallback(self, value):
        """ intermediate callback to avoid race condition """
        with self.lock:
            self.onConditionTriggered(value)

    def reportOptionStrToInteger(self, reportOptionStr):
        """ convert report mode string to corresponding report mode integer """
        map = {
            "Any change":0,
            "Any edge":1,
            "Rising edge":2,
        }
        if reportOptionStr in map.keys():
            return map[reportOptionStr]
        return None

    def setParameter(self, parameterName, value):
        """ parameters changed callback """
        with self.lock:
            #update parameters
            if parameterName == "Condition":
                self.condition = value
            elif parameterName == "Report mode":
                self.report_mode = value

            #apply if running
            if self.isRunning:
                self.expressionObject = None
                self.addExpression(self.condition, self.report_mode)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Output name="onConditionTriggered" type="0" type_size="1" nature="2" inner="0" tooltip="Signal triggered each time designed expression condition is valid" id="5" />
        <Parameter name="Condition" inherits_from_parent="0" content_type="3" value="bang(&apos;myEvent&apos;) &amp;&amp; &apos;myEvent&apos; == 1" default_value="bang(&apos;myEvent&apos;) &amp;&amp; &apos;myEvent&apos; == 1" custom_choice="0" tooltip="Condition expression in ConditionChecker language." id="6" />
        <Parameter name="Report mode" inherits_from_parent="0" content_type="3" value="Any change" default_value="Any change" custom_choice="0" tooltip="Choosen report mode, available modes:&#x0A;&#x0A;Any change: report any time the global value of the condition change&#x0A;Any edge: report any time the global value of the condition goes from True to False or reverse&#x0A;Rising edge: report any time the global value of the condition goes from anything to True" id="7">
            <Choice value="Any change" />
            <Choice value="Any edge" />
            <Choice value="Rising edge" />
        </Parameter>
    </Box>
</ChoregrapheBox>
