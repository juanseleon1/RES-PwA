<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheBox xar_version="3">
    <Box name="root" id="9" localization="8" tooltip="This box returns the detected facial expression of every person in front of the robot.&#x0A;The detection fails when there is no person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. &#x0A;Furthermore it is possible to select the required emotions:&#x0A;- neutral&#x0A;- happy&#x0A;- surprised&#x0A;- angry&#x0A;- sad" x="437" y="397">
        <bitmap>media/images/box/interaction/emotion.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.threshNeutralEmotion = self.confidence + 0.15
        self.threshHappyEmotion = self.confidence
        self.threshSurprisedEmotion = self.confidence + 0.05
        self.threshAngryEmotion = self.confidence + 0.2
        self.threshSadEmotion = self.confidence + 0.15
        self.emotions = ["neutral", "happy", "surprised", "angry", "sad"]
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""

    def onUnload(self):
        self.counter = 0
        self.bIsRunning = False
        self.emotionValues = []
        self.cancelDelays()

    def onInput_onStart(self):
        try:
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)
            self.emotionValues = []
            self.bIsRunning = True
            while self.bIsRunning:
                if self.counter < 4:
                    try:
                        #identify user
                        ids = ALMemory.getData("PeoplePerception/PeopleList")
                        if len(ids) == 0:
                            self.errorMes = "No face detected"
                            self.onUnload()
                        else:
                            #analyze age properties
                            index = -1
                            for id in ids:
                                index += 1
                                self.faceC.analyzeFaceCharacteristics(id)
                                time.sleep(0.1)
                                value = ALMemory.getData("PeoplePerception/Person/"+str(id)+"/ExpressionProperties")
                                elem = [x for x in self.emotionValues if x[0] == id]
                                if elem !=[]:
                                    elemIndex = self.emotionValues.index(elem[0])
                                    self.emotionValues[elemIndex][1][0] += value[0]
                                    self.emotionValues[elemIndex][1][1] += value[1]
                                    self.emotionValues[elemIndex][1][2] += value[2]
                                    self.emotionValues[elemIndex][1][3] += value[3]
                                    self.emotionValues[elemIndex][1][4] += value[4]
                                    self.emotionValues[elemIndex][2] += 1
                                else:
                                    self.emotionValues.append([id, value, 1])
                                self.counter += 1
                    except Exception as e:
                        ids = []
                else:
                    #calculate mean value for neutral, happy, surprised, angry or sad
                    results = []
                    recognized = [0,0,0,0,0]
                    for res in self.emotionValues:
                        emotions = res[1]
                        emotions[0] /= res[2]
                        emotions[1] /= res[2]
                        emotions[2] /= res[2]
                        emotions[3] /= res[2]
                        emotions[4] /= res[2]
                        if self.getParameter("neutral") and emotions[0] > self.threshNeutralEmotion:
                            recognized[0] = emotions[0]
                        if self.getParameter("happy") and emotions[1] >self.threshHappyEmotion:
                            recognized[1] = emotions[1]
                        if self.getParameter("surprised") and emotions[2] > self.threshSurprisedEmotion:
                            recognized[2] = emotions[2]
                        if self.getParameter("angry") and emotions[3] > self.threshAngryEmotion:
                            recognized[3] = emotions[3]
                        if self.getParameter("sad") and emotions[4] > self.threshSadEmotion:
                            recognized[4] = emotions[4]

                        try:
                            if recognized != [0,0,0,0,0]:
                                emotion = self.emotions[recognized.index(max(recognized))]
                            else:
                                emotion = None
                        except:
                            emotion = None
                        if emotion != None:
                            results.append([res[0], emotion])
                    try:
                        ALMemory.removeData("PeoplePerception/Person/"+str(ids[0])+"/ExpressionProperties")
                    except:
                        pass
                    if results != []:
                        self.onStopped(results)
                        self.onUnload()
                        return
                    else:
                        self.counter = 0

            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()

    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip='Returns an array containing [userId, emotion] for every user. The userId is the ID of the person as defined by the ALPeoplePerception API and emotion can be: &#x0A;- &quot;neutral&quot;&#x0A;- &quot;happy&quot;&#x0A;- &quot;surprised&quot;&#x0A;- &quot;angry&quot;&#x0A;- &quot;sad&quot;&#x0A;' id="4" />
        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when gender detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
        <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.35" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="5" min="1" max="60" tooltip="" id="7" />
        <Parameter name="neutral" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
        <Parameter name="happy" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="9" />
        <Parameter name="surprised" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="10" />
        <Parameter name="angry" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="11" />
        <Parameter name="sad" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
    </Box>
</ChoregrapheBox>
