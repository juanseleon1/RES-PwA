<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheBox xar_version="3">
    <Box name="root" id="2" localization="8" tooltip="This box allows push and remove a single object from the WorldRepresentation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See parameters for more details." x="281" y="236">
        <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="Display" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior start displaying when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="5" />
        <Parameter name="objectName" inherits_from_parent="0" content_type="3" value="MyObject" default_value="MyObject" custom_choice="1" tooltip="Name of the object created in the WorldRepresentation." id="6" />
        <Parameter name="parentName" inherits_from_parent="0" content_type="3" value="World" default_value="World" custom_choice="1" tooltip="Name of the parent of the object in the WorldRepresentation.&#x0A;&#x0A;The position is expressed in the frame of this parent." id="7">
            <Choice value="World" />
            <Choice value="Robot" />
            <Choice value="Robot_Torso" />
            <Choice value="Robot_Head" />
        </Parameter>
        <Parameter name="categoryName" inherits_from_parent="0" content_type="3" value="UserObjects" default_value="UserObjects" custom_choice="1" tooltip="Name of the category of the object in the WorldRepresentation." id="8" />
        <Parameter name="x" inherits_from_parent="0" content_type="2" value="2" default_value="2" min="-10" max="10" tooltip="x position of the object in the frame of its parent." id="9" />
        <Parameter name="y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="y position of the object in the frame of its parent." id="10" />
        <Parameter name="z" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="z position of the object in the frame of its parent." id="11" />
        <Parameter name="Wx" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around x axis of the object in the frame of its parent." id="12" />
        <Parameter name="Wy" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around y axis of the object in the frame of its parent." id="13" />
        <Parameter name="Wz" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around z axis of the object in the frame of its parent." id="14" />
        <Parameter name="model" inherits_from_parent="0" content_type="3" value="sphere" default_value="sphere" custom_choice="1" tooltip="Name of the 3D model to be used to display the object in the 3D Robot View." id="15">
            <Choice value="sphere" />
            <Choice value="cylinder" />
            <Choice value="human" />
        </Parameter>
        <Parameter name="colorR" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Red component of the color of the 3D model of the object." id="16" />
        <Parameter name="colorG" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Blue component of the color of the 3D model of the object." id="17" />
        <Parameter name="colorB" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Blue component of the color of the 3D model of the object." id="18" />
        <Parameter name="scaleX" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the x axis of the 3D model of the object." id="19" />
        <Parameter name="scaleY" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the y axis of the 3D model of the object." id="20" />
        <Parameter name="scaleZ" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the z axis of the 3D model of the object." id="21" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="100">
                        <Box name="World Rep Manager" id="1" localization="8" tooltip="This simple box handles parameters and input / outputs to standard World Representation boxes." x="191" y="131">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    OBJECT_NAME_STR = "objectName"
    PARENT_NAME_STR = "parentName"
    CATEGORY_NAME_STR = "categoryName"
    POSITION_STR = "position"
    X_STR = "x"
    Y_STR = "y"
    Z_STR = "z"
    WX_STR = "Wx"
    WY_STR = "Wy"
    WZ_STR = "Wz"
    MODEL_STR = "model"
    RED_STR = "colorR"
    GREEN_STR = "colorG"
    BLUE_STR = "colorB"
    SCALE_X_STR = "scaleX"
    SCALE_Y_STR = "scaleY"
    SCALE_Z_STR = "scaleZ"

    def __init__(self):
        GeneratedClass.__init__(self)
        self.started = False
        self.objectName = str()
        import almath
        self.position = almath.Position6D()
        self.displayFields = {self.MODEL_STR: "text",
            self.RED_STR: "float", self.GREEN_STR: "float",
            self.BLUE_STR: "float", self.SCALE_X_STR: "float",
            self.SCALE_Y_STR: "float", self.SCALE_Z_STR: "float"}
        self.started = False
        self.BIND_PYTHON(self.getName(), "setParameter")
        import threading
        self.lock = threading.Lock()

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        objectName = self.getParameter(self.OBJECT_NAME_STR)
        parentName = self.getParameter(self.PARENT_NAME_STR)
        categoryName = self.getParameter(self.CATEGORY_NAME_STR)
        self.sendStoreObject([objectName, parentName, categoryName])
        self.objectName = objectName
        self.started = True
        pass

    def onInput_onStorageDone(self):
        self.sendUpdatePosition([self.objectName,
            self.getParameter(self.X_STR),
            self.getParameter(self.Y_STR),
            self.getParameter(self.Z_STR),
            self.getParameter(self.WX_STR),
            self.getParameter(self.WY_STR),
            self.getParameter(self.WZ_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.MODEL_STR, self.getParameter(self.MODEL_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.RED_STR, self.getParameter(self.RED_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.GREEN_STR, self.getParameter(self.GREEN_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.BLUE_STR, self.getParameter(self.BLUE_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.SCALE_X_STR, self.getParameter(self.SCALE_X_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.SCALE_Y_STR, self.getParameter(self.SCALE_Y_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.SCALE_Z_STR, self.getParameter(self.SCALE_Z_STR)])

    def onInput_onStop(self):
        self.sendRemoveObject(self.getParameter(self.OBJECT_NAME_STR))
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped

    def setParameter(self, parameter, value):
        if not self.started:
            return # silently do nothing
        if parameter is self.OBJECT_NAME_STR:
            self.removeObject(self.objectName)
            objectName = self.getParameter(self.OBJECT_NAME_STR)
            parentName = self.getParameter(self.PARENT_NAME_STR)
            categoryName = self.getParameter(self.CATEGORY_NAME_STR)
            self.objectName = objectName
            self.sendStoreObject([objectName, parentName, categoryName])
        elif parameter is self.PARENT_NAME_STR:
            self.removeObject(self.objectName)
            objectName = self.getParameter(self.OBJECT_NAME_STR)
            parentName = self.getParameter(self.PARENT_NAME_STR)
            categoryName = self.getParameter(self.CATEGORY_NAME_STR)
            self.sendStoreObject([objectName, parentName, categoryName])
        elif parameter is self.CATEGORY_NAME_STR:
            if value != self.getParameter(self.CATEGORY_NAME_STR):
                self.removeObject(self.object[self.OBJECT_NAME_STR])
                self.setupCategory(value)
                self.sendStoreObject([objectName, parentName, categoryName])
        elif parameter in (self.X_STR, self.Y_STR, self.Z_STR, self.WX_STR, self.WY_STR, self.WZ_STR):
            pose = self.position
            if parameter == self.X_STR:
                pose.x = value
            elif parameter == self.Y_STR:
                pose.y = value
            elif parameter == self.Z_STR:
                pose.z = value
            elif parameter == self.WX_STR:
                pose.wx = value
            elif parameter == self.WY_STR:
                pose.wy = value
            elif parameter == self.WZ_STR:
                pose.wz = value
            self.sendUpdatePosition([self.objectName,
                pose.x,
                pose.y,
                pose.z,
                pose.wx,
                pose.wy,
                pose.wz])
            self.position = pose
        elif parameter in self.displayFields.iterkeys():
            self.sendUpdateDisplayAttribute([self.objectName, parameter, value])]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onStorageDone" type="1" type_size="1" nature="1" inner="0" tooltip="To be stimulated when a storage operation has been done.&#x0A;&#x0A;Connect from a storageDone output from a Store World Rep box." id="4" />
                            <Input name="onMoveDone" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Output name="sendStoreObject" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated when a storing object has been requested.&#x0A;&#x0A;Connect to Store World Rep box onStoreObject input." id="6" />
                            <Output name="sendRemoveObject" type="3" type_size="1" nature="2" inner="0" tooltip="Stimulated when a deleting object has been requested.&#x0A;&#x0A;Connect to Store World Rep box onRemoveObject input." id="7" />
                            <Output name="sendUpdatePosition" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated when a position update of the object has been requested.&#x0A;&#x0A;Connect to Move World Rep box updatePosition input." id="8" />
                            <Output name="sendUpdateDisplayAttribute" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated when a display attribute update of the object has been requested.&#x0A;&#x0A;Connect to Display World Rep box updateDisplay input." id="9" />
                            <Parameter name="objectName" inherits_from_parent="1" content_type="3" value="MyObject" default_value="" custom_choice="1" tooltip="Name of the object created in the WorldRepresentation." id="10" />
                            <Parameter name="parentName" inherits_from_parent="1" content_type="3" value="World" default_value="Robot_CameraTop" custom_choice="1" tooltip="Name of the parent of the object in the WorldRepresentation.&#x0A;&#x0A;The position is expressed in the frame of this parent." id="11">
                                <Choice value="World" />
                                <Choice value="Robot" />
                                <Choice value="Robot_Torso" />
                                <Choice value="Robot_Head" />
                                <Choice value="Robot_CameraTop" />
                            </Parameter>
                            <Parameter name="categoryName" inherits_from_parent="1" content_type="3" value="Default" default_value="" custom_choice="1" tooltip="Name of the category of the object in the WorldRepresentation." id="12" />
                            <Parameter name="x" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="x position of the object in the frame of its parent." id="13" />
                            <Parameter name="y" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="y position of the object in the frame of its parent." id="14" />
                            <Parameter name="z" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="z position of the object in the frame of its parent." id="15" />
                            <Parameter name="Wx" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around x axis of the object in the frame of its parent." id="16" />
                            <Parameter name="Wy" inherits_from_parent="1" content_type="2" value="-0.753984" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around y axis of the object in the frame of its parent." id="17" />
                            <Parameter name="Wz" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around z axis of the object in the frame of its parent." id="18" />
                            <Parameter name="model" inherits_from_parent="1" content_type="3" value="sphere" default_value="sphere" custom_choice="1" tooltip="Name of the 3D model to be used to display the object in the 3D Robot View." id="19">
                                <Choice value="sphere" />
                                <Choice value="cylinder" />
                                <Choice value="human" />
                            </Parameter>
                            <Parameter name="colorR" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Red component of the color of the 3D model of the object." id="20" />
                            <Parameter name="colorG" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Green component of the color of the 3D model of the object. " id="21" />
                            <Parameter name="colorB" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Blue component of the color of the 3D model of the object. " id="22" />
                            <Parameter name="scaleX" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the x axis of the 3D model of the object." id="23" />
                            <Parameter name="scaleY" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the y axis of the 3D model of the object" id="24" />
                            <Parameter name="scaleZ" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the z axis of the 3D model of the object" id="25" />
                        </Box>
                        <Box name="Create Object Representation" id="5" localization="8" tooltip="This box allows to simply store and remove objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="497" y="32">
                            <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    REMOVE_ON_QUIT_STR = "removeOnQuit"

    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)
        import threading
        self.lock = threading.Lock()

    def onLoad(self):
        self.objects = []
        pass

    def onUnload(self):
        #put clean-up code here
        if self.getParameter(self.REMOVE_ON_QUIT_STR):
            for object in self.objects:
                self.onInput_removeObject(str(object))
        pass

    def onInput_storeObject(self, p):
        objectName = str()
        parentName = "World"
        categoryName = "UserObjects"
        position = [0, 0, 0, 0, 0, 0]
        try:
            if isinstance(p, basestring):
                raise Exception("%s is a string, not a list" % (p))
            objectName = p[0]
            if len(p) >= 2:
                parentName = p[1]
            if len(p) >= 3:
                categoryName = p[2]
            if len(p) == 4:
                position = p[3]
        except Exception as e:
            self.logger.error("onInput_onStart(%s): error in parameters "\
                "(see tooltip for details on expected parameter format)" % (p))
            return
        self.lock.acquire()
        self.createCategory(categoryName)
        self.storeObject(objectName, parentName, categoryName, position)
        self.objects.append(objectName)
        self.storageDone(objectName)
        self.lock.release()

    def onInput_removeObject(self, objectName):
        if not isinstance(objectName, basestring):
            self.logger.error("onInput_removeObject(%s): expected a string" \
                " (see tooltip for details)" % (objectName))
        self.lock.acquire()
        self.removeObject(objectName)
        try:
            self.objects.remove(objectName)
        except:
            pass
        self.removalDone(objectName)
        self.lock.release()

    def createCategory(self, categoryName):
        ret = 0
        try:
            ret = self.wr.createObjectCategory(categoryName, False)
        except Exception as e:
            self.logger.warning("wr.createObjectCategory(%s, %s) error code: %s"
                % (categoryName, False, e))

    def storeObject(self, objectName, parentName, categoryName, position):
        ret = 0
        defaultAttributes = []
        try:
            ret = self.wr.storeObject(objectName, parentName, position, categoryName, defaultAttributes)
        except Exception as e:
            self.logger.warning("wr.storeObject(%s, %s, %s, %s, %s) error: %s"
                % (objectName, parentName, position, categoryName, defaultAttributes, e))

    def removeObject(self, objectName):
        ret = 0
        try:
            ret = self.wr.clearObject(objectName)
        except Exception as e:
            self.logger.warning("wr.clearObject(%s) error: %s" % (objectName, e))]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="storeObject" type="0" type_size="1" nature="1" inner="0" tooltip="Store a new object in the World Representation.&#x0A;The parameters are expected as follows:&#x0A;[ObjectName, (ParentObjectName), (CategoryName), (Position)]&#x0A;&#x0A;ObjectName is a string that identifies the object in the World Representation.&#x0A;&#x0A;ParentObjectName is the string identifier of the parent object in the World Representation. &#x0A;The object will be added in the frame of the parent object.&#x0A;The parent name cannot be changed at runtime.&#x0A;If no value is provided, the object will be added in the default world frame.&#x0A;&#x0A;CategoryName is the string identifying the Category to put the object in.&#x0A;If no value is provided, the object will be added in the &apos;Default&apos; category.&#x0A;&#x0A;Position is a string with the following layout [x, y, z, Wx, Wy, Wz]. It is the position of the object in the frame of its parent.&#x0A;The default value is [0, 0, 0, 0, 0, 0]" id="2" />
                            <Input name="removeObject" type="3" type_size="1" nature="1" inner="0" tooltip="Removes an Object identified with the supplied string from the WorldRepresentation." id="3" />
                            <Output name="storageDone" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when the storage of the given object is finished." id="4" />
                            <Output name="removalDone" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when the removal of the given object is finished." id="5" />
                            <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="6" />
                            <Parameter name="removeOnQuit" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Remove the created objects when quitting." id="7" />
                        </Box>
                        <Box name="Move Object Representation" id="4" localization="8" tooltip="This box allows to simply move objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="491" y="147">
                            <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_updatePosition(self, p):
        objectName = str()
        import almath
        pose = almath.Position6D(0, 0, 0, 0, 0, 0)
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updatePosition(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            parentName = self.getObjectParent(objectName)
            poseVec = self.getPosition6D(objectName, parentName)
            pose = almath.Position6D(
                poseVec[0],
                poseVec[1],
                poseVec[2],
                poseVec[3],
                poseVec[4],
                poseVec[5])
            if len(p) >= 4:
                pose.x = p[1]
                pose.y = p[2]
                pose.z = p[3]
            if len(p) >= 7:
                pose.wx = p[4]
                pose.wy = p[5]
                pose.wz = p[6]
        except Exception as e:
            self.logger.error("onInput_updatePosition(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.updatePosition(objectName, pose)
        self.done(objectName)

    def getObjectParent(self, objectName):
        try:
            parentName = self.wr.getObjectParentName(objectName)
            return parentName
        except Exception as e:
            self.logger.warning("wr.getObjectParent(%s) error: %s" % (objectName, e))

    def getPosition6D(self, objectName, parentName):
        try:
            position = self.wr.getPosition6D(objectName, parentName)
            return position
        except Exception as e:
            self.logger.warning("wr.getPosition6D(%s, %s) error: %s" % (objectName, parentName, e))

    def updatePosition(self, objectName, pose):
        try:
            vectorPosition = [pose.x, pose.y, pose.z, pose.wx, pose.wy, pose.wz]
            ret = self.wr.updatePosition(objectName, vectorPosition, True)
            if ret is not 0:
                self.logger.warning("wr.updatePosition(%s, %s) error code: %d"
                    % (objectName, pose, ret))
        except Exception as e:
            self.logger.warning("wr.updatePosition(%s, %s) error: %s"
                % (objectName, pose, e))]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="updatePosition" type="0" type_size="1" nature="1" inner="0" tooltip="updates the position of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, x, y, z (, Wx, Wy, Wz)]" id="2" />
                            <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
                            <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
                        </Box>
                        <Box name="Edit Object Representation" id="6" localization="8" tooltip="This box allows to simply edit display properties of objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See parameters for more details." x="505" y="267">
                            <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    DISPLAY_STR = "Display"
    MODEL_STR = "model"
    RED_STR = "colorR"
    GREEN_STR = "colorG"
    BLUE_STR = "colorB"
    SCALE_X_STR = "scaleX"
    SCALE_Y_STR = "scaleY"
    SCALE_Z_STR = "scaleZ"

    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)
        import threading
        self.lock = threading.Lock()
        self.displayFields = {self.MODEL_STR: "text",
            self.RED_STR: "float", self.GREEN_STR: "float",
            self.BLUE_STR: "float", self.SCALE_X_STR: "float",
            self.SCALE_Y_STR: "float", self.SCALE_Z_STR: "float"}

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_updateDisplay(self, p):
        objectName = str()
        displayAttribute = str()
        displayAttributeValue = str()
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updateDisplay(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            displayAttribute = p[1]
            displayAttributeValue = p[2]
        except Exception as e:
            self.logger.error("onInput_updateDisplay(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.lock.acquire()
        categoryName = self.objectCategory(objectName)
        self.setupDisplayAttribute(categoryName)
        self.updateDisplayAttribute(objectName, displayAttribute, displayAttributeValue)
        self.lock.release()

    def objectCategory(self, objectName):
        try:
            categoryName = self.wr.getObjectCategory(objectName)
            return categoryName
        except Exception as e:
            self.logger.warning("wr.getObjectCategory(%s) error: %s" % (objectName, e))
            raise

    def setupDisplayAttribute(self, categoryName):
        attributesList = []
        try:
            attributesList = self.wr.getAttributesFromCategory(categoryName)
        except Exception as e:
            self.logger.error("wr.getAttributesFromCategory(%s) error: %s"
                % (categoryName, e))
            raise
        attributesMap = self.fieldsToMap(attributesList)
        if self.DISPLAY_STR not in attributesMap.keys():
            try:
                self.wr.addAttributeToCategory(
                    categoryName,
                    self.DISPLAY_STR,
                    self.fieldsFromMap(self.displayFields))
            except Exception as e:
                self.logger.warning("wr.addAttributeToCategory(%s, %s, [%s]) error: %s"
                    % (categoryName, self.DISPLAY_STR, self.displayFields, e))
                raise
        else:
            displayList = attributesMap[self.DISPLAY_STR]
            displayMap = self.fieldsToMap(displayList)
            fieldsMatch = True
            for key, value in self.displayFields.iteritems():
                if key not in displayMap.keys():
                    fieldsMatch = False
                    break
                if displayMap[key] != value:
                    fieldsMatch = False
                    break
            if not fieldsMatch:
                raise Exception("The category %s already exists and its %s(%s) attribute does not match the "\
                    "standard. Objects will not be displayed." % (categoryName, self.DISPLAY_STR, displayMap))
        pass

    def updateDisplayAttribute(self, objectName, parameterName, parameterValue):
        try:
            ret = self.wr.updateAttribute(
                objectName,
                self.DISPLAY_STR,
                "1",
                [[parameterName, parameterValue]])
            if ret is not 0:
                self.logger.warning("wr.updateAttribute(%s, %s, %s, %s) error code: %d"
                    %(objectName, self.DISPLAY_STR, "1", [[parameterName, parameterValue]], ret))
        except Exception as e:
            self.logger.warning("wr.updateAttribute(%s, %s, %s, %s) error: %s"
                %(objectName, self.DISPLAY_STR, "1", str([[parameterName, parameterValue]]), e))


    @staticmethod
    def fieldsToMap(attributes):
        map = dict()
        for pair in attributes:
            try:
                map[pair[0]] = pair[1]
            except:
                pass
        return map

    @staticmethod
    def fieldsFromMap(map):
        attributes = list()
        for key, value in map.iteritems():
            attributes.append([key, value])
        return attributes]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="updateDisplay" type="0" type_size="1" nature="1" inner="0" tooltip="updates the given display attribute of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, displayAttribute, displayValue]&#x0A;&#x0A;The displayAttribute argument is a string.&#x0A;&#x0A;The displayAttributeValue is the corresponding value.&#x0A;&#x0A;A single stimulation of this box sets all the other display parameters to their default values and adds the Display attribute to the object category." id="2" />
                            <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
                            <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="5" indexofinput="3" outputowner="1" indexofoutput="7" />
                        <Link inputowner="1" indexofinput="4" outputowner="5" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="6" />
                        <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="0" indexofinput="5" outputowner="4" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="9" />
                        <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheBox>
