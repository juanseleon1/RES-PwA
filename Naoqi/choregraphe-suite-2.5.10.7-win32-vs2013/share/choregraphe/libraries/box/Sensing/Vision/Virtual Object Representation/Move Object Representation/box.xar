<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheBox xar_version="3">
    <Box name="root" id="4" localization="8" tooltip="This box allows to simply move objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="491" y="147">
        <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_updatePosition(self, p):
        objectName = str()
        import almath
        pose = almath.Position6D(0, 0, 0, 0, 0, 0)
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updatePosition(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            parentName = self.getObjectParent(objectName)
            poseVec = self.getPosition6D(objectName, parentName)
            pose = almath.Position6D(
                poseVec[0],
                poseVec[1],
                poseVec[2],
                poseVec[3],
                poseVec[4],
                poseVec[5])
            if len(p) >= 4:
                pose.x = p[1]
                pose.y = p[2]
                pose.z = p[3]
            if len(p) >= 7:
                pose.wx = p[4]
                pose.wy = p[5]
                pose.wz = p[6]
        except Exception as e:
            self.logger.error("onInput_updatePosition(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.updatePosition(objectName, pose)
        self.done(objectName)

    def getObjectParent(self, objectName):
        try:
            parentName = self.wr.getObjectParentName(objectName)
            return parentName
        except Exception as e:
            self.logger.warning("wr.getObjectParent(%s) error: %s" % (objectName, e))

    def getPosition6D(self, objectName, parentName):
        try:
            position = self.wr.getPosition6D(objectName, parentName)
            return position
        except Exception as e:
            self.logger.warning("wr.getPosition6D(%s, %s) error: %s" % (objectName, parentName, e))

    def updatePosition(self, objectName, pose):
        try:
            vectorPosition = [pose.x, pose.y, pose.z, pose.wx, pose.wy, pose.wz]
            ret = self.wr.updatePosition(objectName, vectorPosition, True)
            if ret is not 0:
                self.logger.warning("wr.updatePosition(%s, %s) error code: %d"
                    % (objectName, pose, ret))
        except Exception as e:
            self.logger.warning("wr.updatePosition(%s, %s) error: %s"
                % (objectName, pose, e))]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="updatePosition" type="0" type_size="1" nature="1" inner="0" tooltip="updates the position of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, x, y, z (, Wx, Wy, Wz)]" id="2" />
        <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
    </Box>
</ChoregrapheBox>
